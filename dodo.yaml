include:
  - file: '{{ currentDir }}/base/dodo.yaml'
  - file: '{{ currentDir }}/cloudtools/dodo.yaml'
  - file: '{{ currentDir }}/git/dodo.yaml'
  - file: '{{ currentDir }}/session/dodo.yaml'
  - file: '{{ currentDir }}/ssh/dodo.yaml'
  - file: '{{ currentDir }}/vi/dodo.yaml'
  - file: '{{ currentDir }}/languages/buildbase/dodo.yaml'
  - file: '{{ currentDir }}/languages/golang/dodo.yaml'
  - file: '{{ currentDir }}/languages/python/dodo.yaml'
  - file: '{{ currentDir }}/languages/ruby/dodo.yaml'
  - file: '{{ currentDir }}/languages/rust/dodo.yaml'

stages:
  default:
    type: docker-machine

  wabe:
    type: virtualbox
    box:
      user: debian
      name: buster64
      version: 10.0.0
    volumes:
      - size: 100GB
    options:
      cpu: 4
      memory: 8192
      modify: [
        '--usb', 'on',
        '--audio', 'coreaudio',
        '--audiocontroller', 'ac97',
        '--audiocodec', 'ad1980',
      ]
      provision:
        - apt-get update
        - apt-get install -y nfs-common ntp
        - if [ "$(file -b -s /dev/sdb)" = "data" ]; then mkfs -F -t ext4 /dev/sdb; fi
        - mkdir -p /var/lib/docker
        - mount /dev/sdb /var/lib/docker
        - mkdir -p /Users/ole.claussen
        # TODO: this gives a 130 error code, investigate why and fix
        # TODO: also, manage the nfs share on the host
        - mount -t nfs 192.168.99.1:/Users/ole.claussen /Users/ole.claussen || true

backdrops:
  init:
    stage: wabe
    forward_stage: true
    image:
      # Make sure to build everything on init
      requires: [dodo/base, dodo/git, dodo/tmux, dodo/vim]
      steps: |
        FROM dodo/base
        RUN apt-get update && apt-get -y install curl
        RUN curl -L -o /bin/docker-compose \
            https://github.com/docker/compose/releases/download/1.24.1/docker-compose-Linux-x86_64 \
         && chmod +x /bin/docker-compose
    volumes:
      - '{{ currentDir }}:/compose'
    working_dir: '/compose'
    script: exec docker-compose up -d --build

  k9s:
    build:
      steps: |
        FROM alpine:3.9
        RUN apk add ca-certificates git bash curl
        RUN wget -O /bin/aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.10.3/2018-07-26/bin/linux/amd64/aws-iam-authenticator
        RUN chmod +x /bin/aws-iam-authenticator
        RUN wget -O /tmp/k9s.tar.gz https://github.com/derailed/k9s/releases/download/0.7.6/k9s_0.7.6_Linux_x86_64.tar.gz
        RUN tar -xzf /tmp/k9s.tar.gz -C /bin
    volumes:
      - 'awsconfig:/root/.aws'
      - 'kubeconfig:/root/.kube'
    script: exec k9s "$@"

  ctop:
    forward_stage: true
    build:
      steps: |
        FROM alpine:3.9
        COPY --from=quay.io/vektorlab/ctop:latest /ctop /bin/ctop
    script: exec ctop "$@"

  psql:
    image:
      steps: |
        FROM alpine:3.9
        RUN apk add --no-cache postgresql-client
    script: exec psql "$@"

  mysql:
    image:
      steps: |
        FROM alpine:3.9
        RUN apk add --no-cache mysql-client
    script: exec mysql "$@"
