backdrops:
  gpg:
    image:
      name: dodo/gpg
      requires: [dodo/languages/buildbase, dodo/languages/python, dodo/base]
      context: '{{ currentDir }}'
      dockerfile: '{{ currentDir }}/Dockerfile'
    volumes:
      - 'gpg-agent:/data/gpg-agent'
      - '{{ projectRoot }}:/build'
    working_dir: '/build/{{ projectPath }}'
    script: |
      if [ "$1" = "status" ]; then
        . /home/dodo/.lib/gpg_cards.sh
        if ! is_agent_running; then echo "locked"; exit 0; fi
        card="$(current_card)"
        if [ -n "${card}" ]; then basename "${card}" .txt; else echo "locked"; fi
      else
        exec gpg "$@"
      fi

  unlock:
    container_name: gpg-agent
    image:
      name: dodo/gpg
      requires: [dodo/languages/buildbase, dodo/languages/python, dodo/base]
      context: '{{ currentDir }}'
      dockerfile: '{{ currentDir }}/Dockerfile'
    volumes:
      - '/dev/bus/usb:/dev/bus/usb'
      - 'scd:/var/run/pcscd'
      - 'gpg-agent:/data/gpg-agent'
    devices:
      - cgroup_rule: 'c *:* rmw'
    script: |
      export GPG_TTY=$(tty)
      . /home/dodo/.lib/gpg_cards.sh
      init_agent
      unlock_any_card
      while check_usb; do sleep 1; done

  ykman:
    image:
      name: dodo/gpg
      requires: [dodo/languages/buildbase, dodo/languages/python, dodo/base]
      context: '{{ currentDir }}'
      dockerfile: '{{ currentDir }}/Dockerfile'
    volumes:
      - '/dev/bus/usb:/dev/bus/usb'
      - 'scd:/var/run/pcscd'
    devices:
      - cgroup_rule: 'c *:* rmw'
    script: |
      set -eux
      rm -f /var/run/pcscd/*
      pcscd
      exec ykman "$@"
