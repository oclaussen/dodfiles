backdrops:
  cloudtools: &cloudtools
    image:
      name: dodo/cloudtools
      requires: [dodo/base, dodo/languages/golang]
      context: '{{ currentDir }}'
      dockerfile: '{{ currentDir }}/Dockerfile'
    volumes:
      - 'awsconfig:/home/dodo/.aws'
      - 'sshconfig:/home/dodo/.ssh'
      - 'kubeconfig:/home/dodo/.kube'
      - '{{ projectRoot }}:/build'
    working_dir: '/build/{{ projectPath }}'

  docker:
    <<: *cloudtools
    forward_stage: true
    script: |
      if [ "$1" = "compose" ]; then
        shift
        exec docker-compose "$@"
      elif [ "$1" = "host" ]; then
        shift
        exec docker run -it --rm --privileged --net=host --pid=host --ipc=host --volume /:/host "$@" busybox chroot /host
      else
        exec docker "$@"
      fi

  aws:
    <<: *cloudtools
    script: exec aws "$@"

  terraform:
    <<: *cloudtools
    environment:
      - TF_LOG=DEBUG
      - TF_LOG_PATH=/build/terraform.log
      - TF_VAR_username=ole.claussen
    script: |
      test -f terraform.log && rm -f terraform.log
      exec terraform "$@"
    command: apply

  tfsec:
    <<: *cloudtools
    script: exec tfsec "$@"

  packer:
    <<: *cloudtools
    script: exec packer "$@"

  ansible:
    <<: *cloudtools
    environment:
      - ANSIBLE_HOST_KEY_CHECKING=False
    script: |
      eval $(ssh-agent)
      ssh-add
      ansible-playbook "$@"

  kubectl:
    <<: *cloudtools
    script: |
      if [ "$1" = "ctx" ]; then
        shift
        exec /bin/kubectx "$@"
      elif [ "$1" = "ns" ]; then
        shift
        exec /bin/kubens "$@"
      else
        exec /bin/kubectl "$@"
      fi

  render:
    <<: *cloudtools
    script: exec render "$@"
